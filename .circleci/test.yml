<<<<<<< HEAD


=======
>>>>>>> test-bran
version: 2.1

# the default pipeline parameters, which will be updated according to
# the results of the path-filtering orb
parameters:
  lint_only:
    type: boolean
    default: true

jobs:
  lint:
    docker:
      - image: cimg/python:3.7.4
    steps:
      - checkout
      - run:
          name: Install pre-commit hook
          command: |
            pip install pre-commit
            pre-commit install
      - run:
          name: Linting
          command: pre-commit run --all-files
      - run:
          name: Check docstring coverage
          command: |
            pip install interrogate
<<<<<<< HEAD
            interrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex "__repr__" --fail-under 50 mmdet
=======
            interrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-magic --ignore-regex "__repr__" --fail-under 85 mmdet

>>>>>>> test-bran
  build_cpu:
    parameters:
      # The python version must match available image tags in
      # https://circleci.com/developer/images/image/cimg/python
      python:
        type: string
      torch:
        type: string
      torchvision:
        type: string
    docker:
      - image: cimg/python:<< parameters.python >>
    resource_class: large
    steps:
      - checkout
      - run:
<<<<<<< HEAD
          name: Get MMCV_TORCH as environment variables
          command: |
            . .circleci/scripts/get_mmcv_var.sh << parameters.torch >>
            source $BASH_ENV
      - run:
          name: Install Libraries
          command: |
            sudo apt-get update
            sudo apt-get install -y ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 libgl1-mesa-glx libjpeg-dev zlib1g-dev libtinfo-dev libncurses5 libgeos-dev cmake git
      - run:
          name: Configure Python & pip
          command: |
            python -m pip install --upgrade pip
            python -m pip install wheel
=======
          name: Install Libraries
          command: |
            sudo apt-get update
            sudo apt-get install -y ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 libgl1-mesa-glx libjpeg-dev zlib1g-dev libtinfo-dev libncurses5
      - run:
          name: Configure Python & pip
          command: |
            pip install --upgrade pip
            pip install wheel
>>>>>>> test-bran
      - run:
          name: Install PyTorch
          command: |
            python -V
            python -m pip install torch==<< parameters.torch >>+cpu torchvision==<< parameters.torchvision >>+cpu -f https://download.pytorch.org/whl/torch_stable.html
<<<<<<< HEAD
      - run:
          name: Install mmdet dependencies
          command: |
            python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html
            python -m pip install -r requirements.txt
            python -m pip install albumentations --no-binary qudida,albumentations
            python -m pip install git+https://github.com/cocodataset/panopticapi.git
      - run:
          name: Build and install
          command: |
            python -m pip install -e .
=======
      - when:
          condition:
            equal: ["3.9.0", << parameters.python >>]
          steps:
            - run: pip install "protobuf <= 3.20.1" && sudo apt-get update && sudo apt-get -y install libprotobuf-dev protobuf-compiler cmake
      - run:
          name: Install mmdet dependencies
          # numpy may be downgraded after building pycocotools, which causes `ImportError: numpy.core.multiarray failed to import`
          # force reinstall pycocotools to ensure pycocotools being built under the currenct numpy
          command: |
            python -m pip install git+ssh://git@github.com/open-mmlab/mmengine.git@main
            pip install -U openmim
            mim install 'mmcv >= 2.0.0rc4'
            pip install -r requirements/tests.txt -r requirements/optional.txt
            pip install --force-reinstall pycocotools
            pip install albumentations>=0.3.2 --no-binary imgaug,albumentations
            pip install git+https://github.com/cocodataset/panopticapi.git
      - run:
          name: Build and install
          command: |
            pip install -e .
>>>>>>> test-bran
      - run:
          name: Run unittests
          command: |
            python -m coverage run --branch --source mmdet -m pytest tests/
            python -m coverage xml
            python -m coverage report -m
<<<<<<< HEAD
=======

>>>>>>> test-bran
  build_cuda:
    parameters:
      torch:
        type: string
      cuda:
        type: enum
<<<<<<< HEAD
        enum: ["10.1", "10.2", "11.1"]
=======
        enum: ["10.1", "10.2", "11.1", "11.7"]
>>>>>>> test-bran
      cudnn:
        type: integer
        default: 7
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
<<<<<<< HEAD
      docker_layer_caching: true
=======
      # docker_layer_caching: true
>>>>>>> test-bran
    resource_class: gpu.nvidia.small
    steps:
      - checkout
      - run:
<<<<<<< HEAD
          name: Get MMCV_TORCH and MMCV_CUDA as environment variables
          command: |
            . .circleci/scripts/get_mmcv_var.sh << parameters.torch >> << parameters.cuda >>
            source $BASH_ENV
      - run:
          name: Build Docker image
          command: |
            docker build .circleci/docker -t mmdet:gpu --build-arg PYTORCH=<< parameters.torch >> --build-arg CUDA=<< parameters.cuda >> --build-arg CUDNN=<< parameters.cudnn >>
            docker run --gpus all -t -d -v /home/circleci/project:/mmdet -w /mmdet --name mmdet mmdet:gpu
      - run:
          name: Install mmdet dependencies
          command: |
            docker exec mmdet pip install --upgrade pip
            docker exec mmdet pip install wheel
            docker exec mmdet pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/${MMCV_CUDA}/torch${MMCV_TORCH}/index.html
            docker exec mmdet pip install -r requirements.txt
            docker exec mmdet pip install typing-extensions -U
            docker exec mmdet pip install albumentations --use-pep517 qudida albumentations
            docker exec mmdet python -c 'import albumentations; print(albumentations.__version__)'
            docker exec mmdet pip install git+https://github.com/cocodataset/panopticapi.git
      - run:
          name: Build and install
          command: |
            docker exec mmdet pip install -e .
      - run:
          name: Run unittests
          command: |
            docker exec mmdet python -m pytest tests/
=======
          # CLoning repos in VM since Docker doesn't have access to the private key
          name: Clone Repos
          command: |
            git clone -b main --depth 1 ssh://git@github.com/open-mmlab/mmengine.git /home/circleci/mmengine
      - run:
          name: Build Docker image
          command: |
            docker build .circleci/docker -t mmdetection:gpu --build-arg PYTORCH=<< parameters.torch >> --build-arg CUDA=<< parameters.cuda >> --build-arg CUDNN=<< parameters.cudnn >>
            docker run --gpus all -t -d -v /home/circleci/project:/mmdetection -v /home/circleci/mmengine:/mmengine -w /mmdetection --name mmdetection mmdetection:gpu
            docker exec mmdetection apt-get install -y git
      - run:
          name: Install mmdet dependencies
          command: |
            docker exec mmdetection pip install -e /mmengine
            docker exec mmdetection pip install -U openmim
            docker exec mmdetection mim install 'mmcv >= 2.0.0rc4'
            docker exec mmdetection pip install -r requirements/tests.txt -r requirements/optional.txt
            docker exec mmdetection pip install pycocotools
            docker exec mmdetection pip install albumentations>=0.3.2 --no-binary imgaug,albumentations
            docker exec mmdetection pip install git+https://github.com/cocodataset/panopticapi.git
            docker exec mmdetection python -c 'import mmcv; print(mmcv.__version__)'
      - run:
          name: Build and install
          command: |
            docker exec mmdetection pip install -e .
      - run:
          name: Run unittests
          command: |
            docker exec mmdetection python -m pytest tests/

>>>>>>> test-bran
workflows:
  pr_stage_lint:
    when: << pipeline.parameters.lint_only >>
    jobs:
      - lint:
          name: lint
          filters:
            branches:
              ignore:
<<<<<<< HEAD
                - master
  pr_stage_test:
    when:
      not:
        << pipeline.parameters.lint_only >>
=======
                - dev-3.x
  pr_stage_test:
    when:
      not: << pipeline.parameters.lint_only >>
>>>>>>> test-bran
    jobs:
      - lint:
          name: lint
          filters:
            branches:
              ignore:
<<<<<<< HEAD
                - master
=======
                - dev-3.x
>>>>>>> test-bran
      - build_cpu:
          name: minimum_version_cpu
          torch: 1.6.0
          torchvision: 0.7.0
<<<<<<< HEAD
          python: 3.7.7
=======
          python: 3.7.4 # The lowest python 3.7.x version available on CircleCI images
>>>>>>> test-bran
          requires:
            - lint
      - build_cpu:
          name: maximum_version_cpu
<<<<<<< HEAD
          torch: 1.9.0
          torchvision: 0.10.0
          python: 3.8.0
=======
          torch: 2.0.0
          torchvision: 0.15.1
          python: 3.9.0
>>>>>>> test-bran
          requires:
            - minimum_version_cpu
      - hold:
          type: approval
          requires:
            - maximum_version_cpu
      - build_cuda:
          name: mainstream_version_gpu
          torch: 1.8.1
          # Use double quotation mark to explicitly specify its type
          # as string instead of number
          cuda: "10.2"
          requires:
            - hold
<<<<<<< HEAD
  merge_stage_test:
    when:
      not:
        << pipeline.parameters.lint_only >>
=======
      - build_cuda:
          name: maximum_version_gpu
          torch: 2.0.0
          cuda: "11.7"
          cudnn: 8
          requires:
            - hold
  merge_stage_test:
    when:
      not: << pipeline.parameters.lint_only >>
>>>>>>> test-bran
    jobs:
      - build_cuda:
          name: minimum_version_gpu
          torch: 1.6.0
<<<<<<< HEAD
          # Use double quotation mark to explicitly specify its type
          # as string instead of number
=======
>>>>>>> test-bran
          cuda: "10.1"
          filters:
            branches:
              only:
<<<<<<< HEAD
                - master
=======
                - dev-3.x
>>>>>>> test-bran
